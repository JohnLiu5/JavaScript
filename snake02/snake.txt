/*****************************声明变量*****************************/
var box=document.getElementById('canv').getContext('2d');   //设置canvas画布的绘图的环境，当前唯一支持的参数是2d
var snake;                                                  //声明一个变量表示蛇
var direction;                                              //声明键盘事件的变量。1表示向右，-1向左，20向下，-20向上
var n;                                                      //下次移动相关
var food;                                                   //声明食物变量
var state=0;

/***************************绘制地图函数***************************/
function draw(point,color){
box.fillStyle=color;                                        //fillStyle()方法为设置用于填充绘画的颜色
box.fillRect(point%20*20+1,~~(point/20)*20+1,18,18);        //fillRect()方法用于绘制“被填充”的矩形
}

        
/*********************各种变量初始化，背景初始化********************/
function ready(){
    state=0;
    for(var i=0;i<400;i++){                                 //循环绘制地图块
        draw(i,"#313131");
    }
    snake=[66,65,64];
    direction=1;
    food=~~(Math.random()*400);
    draw(food,"yellow");                                    //对蛇和食物进行静态赋值并绘制到地图上
    draw(66,"#00b7ee");
    draw(65,"#00b7ee");
    draw(64,"#00b7ee");
}
        

/*****************************核心算法*****************************/
function run(){
    if(state==1)
    {
        snake.unshift(n=snake[0]+direction);                    //用unshift()方法向数组的开头添加一个新元素，新元素为蛇下一步所移动的坐标

        /**********如果蛇头碰到上下左右四个边或者碰到自己的身子*********/
        if(snake.indexOf(n,1)>0||n<0||n>399||(direction==-1&&n%20==19)||(direction==1&&n%20==0)){
            ready();
            run();
            document.getElementById("start").removeAttribute("disabled");
            document.getElementById("stop").removeAttribute("disabled");
            return alert("游戏结束");
        }

        /*********如果蛇头没有碰到边界或蛇身，在地图上绘制蛇头*********/
        draw(n,"#00b7ee");

        /***************如果蛇头吃到了食物（坐标相同）***************/
        if(n==food){
            while(snake.indexOf(food=~~(Math.random()*400))>0); //随机在地图上产生一个新食物，新事物不能于蛇身子重合
            draw(food,"yellow");                                //绘制食物
        }

        /********************如果蛇头没有吃到食物*******************/
        else{
            draw(snake.pop(),"#313131");                        //将蛇尾元素删除并且根据删除的坐标绘制为地图块的颜色
        }

    }else{
       
    }
    /****************每200毫秒重复执行一次该函数****************/
    setTimeout(arguments.callee,200);
}


/***************************自动运行函数***************************/
(function(){ready();run();}());


/*****************************键盘事件*****************************/
document.onkeydown=function(e){
    /*如果蛇当前横着走，当键盘输入up时向上，输入down向下*/
    if(direction==1||direction==-1){
        if(e.keyCode==38){
            direction=-20;
        }
        if(e.keyCode==40){
            direction=20;
        }
    }
    /*如果蛇当前竖着走，当键盘输入left时向左，right时向右*/
    if(direction==20||direction==-20){
        if(e.keyCode==39){
            direction=1;
        }
        if(e.keyCode==37){
            direction=-1;
        }
    }
}




document.getElementById('start').onclick=function(){
    document.getElementById("start").setAttribute("disabled",true);//在游戏开始以后“开始游戏”按钮变为不可点击状态
    document.getElementById("stop").removeAttribute("disabled");
    state=1;
}

document.getElementById('stop').onclick=function(){
    document.getElementById("stop").setAttribute("disabled",true);//在游戏开始以后“开始游戏”按钮变为不可点击状态
    document.getElementById("start").removeAttribute("disabled");
    state=0;
}

